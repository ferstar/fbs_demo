# This is a basic workflow to help you get started with Actions

name: Build fbs bins

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build_deb:
    # The type of runner that the job will run on
    runs-on: ubuntu-18.04
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a set of commands using the runners shell
      - name: Build deb
        shell: bash
        run: |
          sudo add-apt-repository -y ppa:brightbox/ruby-ng-experimental
          sudo apt update
          sudo apt install -y --no-install-recommends python3-dev python3-venv pyqt5-dev squashfs-tools fcitx-frontend-qt5 rubygems ruby2.7
          sudo gem install fpm
          python3 -m venv fbs
          source fbs/bin/activate
          pip3 install pip -U
          pip3 install -r requirements.txt
          fbs freeze
          cp /usr/lib/x86_64-linux-gnu/qt5/plugins/platforminputcontexts/libfcitxplatforminputcontextplugin.so target/fbs_demo/PyQt5/Qt/plugins/platforminputcontexts
          sudo chmod +x target/fbs_demo/PyQt5/Qt/plugins/platforminputcontexts/*.so
          fbs installer

      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2.3.1
        with:
          # Artifact name
          name: fbs_demo.deb  # optional, default is artifact
          # A file, directory or wildcard pattern that describes what to upload
          path: target/fbs_demo.deb
          # The desired behavior if no files are found using the provided path.

  build_dmg:
    # The type of runner that the job will run on
    runs-on: macos-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a set of commands using the runners shell
      - name: Build dmg
        shell: bash
        run: |
          sudo conda create -n fbs python=3.6 -y -q
          eval "$(conda shell.bash hook)"
          conda activate fbs
          sudo pip3 install pip -U
          sudo pip3 install -r requirements.txt
          fbs freeze
          fbs installer

      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2.3.1
        with:
          # Artifact name
          name: fbs_demo.dmg  # optional, default is artifact
          # A file, directory or wildcard pattern that describes what to upload
          path: target/fbs_demo.dmg
          # The desired behavior if no files are found using the provided path.

  build_exe:
    # The type of runner that the job will run on
    runs-on: windows-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: "3.6.x"

      # Runs a set of commands using the runners shell
      - name: Build exe
        shell: powershell
        run: |
          pip3 install pip -U
          pip3 install -r requirements.txt
          fbs freeze
          fbs installer

      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2.3.1
        with:
          # Artifact name
          name: fbs_demoSetup.exe  # optional, default is artifact
          # A file, directory or wildcard pattern that describes what to upload
          path: .\target\fbs_demoSetup.exe
          # The desired behavior if no files are found using the provided path.

  publish:
    runs-on: ubuntu-latest
    needs: [ build_deb, build_dmg, build_exe ]
    steps:
      - name: Download deb
        uses: actions/download-artifact@v2.1.0
        with:
          # Artifact name
          name: fbs_demo.deb  # optional
          path: /tmp

      - name: Download dmg
        uses: actions/download-artifact@v2.1.0
        with:
          # Artifact name
          name: fbs_demo.dmg  # optional
          path: /tmp

      - name: Download exe
        uses: actions/download-artifact@v2.1.0
        with:
          # Artifact name
          name: fbs_demoSetup.exe  # optional
          path: /tmp

      - name: Delete Artifact
        # You may pin to the exact commit or the version.
        # uses: GeekyEggo/delete-artifact@b73cb986740e466292a536d0e32e2666c56fdeb3
        uses: GeekyEggo/delete-artifact@v1.0.0
        with:
          name: |
            fbs_demo.deb
            fbs_demo.dmg
            fbs_demoSetup.exe

      - name: Generate Prerelease Release Notes
        run: |
          zip /tmp/fbs_demoSetup_for_Windows.exe.zip /tmp/fbs_demoSetup.exe && rm /tmp/fbs_demoSetup.exe || ls /tmp
          mv /tmp/fbs_demo.dmg /tmp/fbs_demo_for_macOS.dmg
          mv /tmp/fbs_demo.deb /tmp/fbs_demo_for_Ubuntu.deb
          echo '### fbs_demo`latest`' >> ReleaseNotes.md
          echo '> Written by @ferstar with love.' >> ReleaseNotes.md
          echo '> Generated by Github Actions.' >> ReleaseNotes.md

      - name: Delete Old Prerelease
        uses: dev-drprasad/delete-tag-and-release@v0.2.0
        with:
          tag_name: "v1.0.0"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish GitHub Release
        uses: ncipollo/release-action@v1.9.0
        with:
          bodyFile: ReleaseNotes.md
          artifacts: "/tmp/fbs_demo*.*"
          tag: "v1.0.0"
          token: ${{ secrets.GITHUB_TOKEN }}
